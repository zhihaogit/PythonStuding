'''
冲突（collision）
给两个键分配的位置相同，就是 冲突
如果两个键映射到同一个位置，就在这个位置存储一个链表

1. 散列函数将键均匀地映射到散列表的不同位置
2. 散列表存储的链表很长，散列表的速度将急剧下降

避免冲突
1. 较低的填装因子
2. 良好的散列函数

填装因子 = 散列表包含的元素数 / 位置总数
一旦填装因子开始增大，就需要在散列表中添加位置，称为 调整长度（resizing）

散列表性能
平均情况下是 O(1)
糟糕情况下各项操作都是 O(n)

        散列表（平均情况）    散列表（糟糕情况）  数组  链表
查找      O(1)                O(n)          O(1)  O(n)
插入      O(1)                O(n)          O(n)  O(1)
删除      O(1)                O(n)          O(n)  O(1)

可以结合散列函数和数组来创建列表
冲突很糟糕，使用最大限度减少冲突的散列函数
一旦填装因子超过 0.7，就该调整散列表的长度
'''