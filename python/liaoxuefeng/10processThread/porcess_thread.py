# 进程 vs. 线程
# 设计 Master-Worker模式
# 多进程实现 Master-Worker，主进程是 Master，其他进程是 Worker
# 多线程实现 Master-Worker，主线程是 Master，其他线程是 Worker
# 多进程：稳定性高，创建进程的代价大
# 多线程：比多进程稍快点，但是任何一个挂掉，就全挂掉


# 线程切换
# 多任务一旦多到一个限度，就会消耗掉系统所有的资源，效率急剧下降


# 计算密集型 vs IO密集型
# 计算密集型要进行大量的计算，消耗 cpu资源，代码运行效率要高
# IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，cpu消耗少，大部分时间在等待 IO操作完成（Web应用）


# 异步 IO
# 充分利用操作系统提供的异步 IO支持，就可以用单进程单线程模型来执行多任务，这种叫做 事件驱动模型
# 单线程的异步编程模型称为 协程